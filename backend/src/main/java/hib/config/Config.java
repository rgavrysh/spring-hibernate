package hib.config;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.boot.context.embedded.EmbeddedServletContainerFactory;import org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;import org.springframework.boot.web.servlet.FilterRegistrationBean;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.ComponentScan;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Import;import org.springframework.core.Ordered;import org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor;import org.springframework.orm.jpa.JpaDialect;import org.springframework.orm.jpa.JpaTransactionManager;import org.springframework.orm.jpa.JpaVendorAdapter;import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;import org.springframework.orm.jpa.vendor.HibernateJpaDialect;import org.springframework.web.servlet.DispatcherServlet;import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;import javax.persistence.EntityManagerFactory;import javax.servlet.*;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.sql.DataSource;import java.io.IOException;import java.util.Properties;@Configuration@ComponentScan(basePackages = {        "hib.dao",        "hib.bo",        "hib.model",        "hib.controllers",        "hib.config"})@Import({DataSourceConfig.class, OAuth2Config.class, WebSecurityConfig.class})public class Config extends WebMvcConfigurerAdapter{    @Value("${jpa.dialect}")    String dialect;    @Value("${jpa.showsql}")    String showSql;    @Autowired    DataSource datasource;    @Autowired    JpaVendorAdapter jpaVendorAdapter;    @Value("${hibernate.hbm2ddl.auto}")    String hbm2ddlAuto;    @Override    public void addViewControllers(ViewControllerRegistry registry) {//        registry.addViewController("/index").setViewName("index");        registry.addViewController("/").setViewName("forward:/index.html");        registry.addViewController("/home").setViewName("home.html");        registry.addViewController("/login").setViewName("login.html");        registry.addViewController("/about").setViewName("about.html");        registry.setOrder(Ordered.HIGHEST_PRECEDENCE);        super.addViewControllers(registry);    }    @Bean    LocalContainerEntityManagerFactoryBean entityManager() {        LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();        em.setDataSource(datasource);        em.setJpaProperties(jpaProperties());        em.setJpaVendorAdapter(jpaVendorAdapter);        em.setPersistenceUnitName("api");        em.setPackagesToScan("hib.model");        return em;    }    @Bean    Properties jpaProperties() {        Properties properties = new Properties();        properties.put("hibernate.dialect", "org.hibernate.dialect.PostgreSQLDialect");        properties.put("hibernate.show_sql", true);        properties.put("hibernate.hbm2ddl.auto", "validate");        return properties;    }    @Bean    DispatcherServlet dispatcherServlet() {        DispatcherServlet dispatcherServlet = new DispatcherServlet();        dispatcherServlet.setThrowExceptionIfNoHandlerFound(true);        return dispatcherServlet;    }    @Bean    JpaTransactionManager transactionManager(final EntityManagerFactory entityManagerFactory) {        JpaTransactionManager txManager = new JpaTransactionManager();        JpaDialect jpaDialect = new HibernateJpaDialect();        txManager.setEntityManagerFactory(entityManagerFactory);        txManager.setJpaDialect(jpaDialect);        return txManager;    }    @Bean    public PersistenceExceptionTranslationPostProcessor exceptionTranslation() {        return new PersistenceExceptionTranslationPostProcessor();    }//    @Bean//    public EmbeddedServletContainerFactory servletContainer() {//        TomcatEmbeddedServletContainerFactory factory =//                new TomcatEmbeddedServletContainerFactory();//        factory.setPort(Integer.parseInt(System.getProperty("server.port")));//        return factory;//    }    @Bean    FilterRegistrationBean corsFilter() {        FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean();        filterRegistrationBean.setFilter(new CustomCorsFilter());        filterRegistrationBean.setOrder(Ordered.HIGHEST_PRECEDENCE);        return filterRegistrationBean;    }}class CustomCorsFilter implements Filter {    @Override    public void init(FilterConfig filterConfig) throws ServletException {    }    @Override    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {        HttpServletRequest request = (HttpServletRequest) servletRequest;        HttpServletResponse response = (HttpServletResponse) servletResponse;        response.setHeader("Access-Control-Allow-Origin", request.getHeader("Origin"));        response.setHeader("Access-Control-Allow-Credentials", "true");        response.setHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS, DELETE");        response.setHeader("Access-Control-Max-Age", "3600");        response.setHeader("Access-Control-Allow-Headers", "Content-Type, Accept, X-Requested-With, Authorization");        if ("OPTIONS".equalsIgnoreCase(request.getMethod())) {            response.setStatus(HttpServletResponse.SC_OK);        } else {            filterChain.doFilter(request, response);        }//        filterChain.doFilter(request, response);    }    @Override    public void destroy() {    }}